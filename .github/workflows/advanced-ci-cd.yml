name: D-CloudX Advanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan on Mondays at 2 AM
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: dcloudx
  KUBERNETES_NAMESPACE: dcloudx
  SONAR_PROJECT_KEY: dcloudx-marketplace
  SONAR_ORGANIZATION: vishalnandy17

jobs:
  # Code Quality Analysis
  code-quality:
    runs-on: ubuntu-latest
    outputs:
      quality-gate: ${{ steps.sonar.outputs.quality-gate-status }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd contracts && npm ci
        cd ../server && npm ci
        cd ../client && npm ci
        
    - name: Run ESLint with detailed reporting
      run: |
        cd contracts && npm run lint -- --format json --output-file ../eslint-contracts.json || true
        cd ../server && npm run lint -- --format json --output-file ../eslint-server.json || true
        cd ../client && npm run lint -- --format json --output-file ../eslint-client.json || true
        
    - name: Run Prettier check
      run: |
        cd contracts && npx prettier --check "**/*.{js,ts,sol}" || true
        cd ../server && npx prettier --check "**/*.{js,ts}" || true
        cd ../client && npx prettier --check "**/*.{js,ts,jsx,tsx}" || true
        
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
          -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
          -Dsonar.sources=contracts,server,client
          -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/*.test.js,**/*.spec.ts
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
          -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
          -Dsonar.eslint.reportPaths=eslint-*.json

  # Security Analysis
  security-analysis:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd contracts && npm ci
        cd ../server && npm ci
        cd ../client && npm ci
        
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: javascript, typescript, solidity
      continue-on-error: true
      
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'D-CloudX'
        path: '.'
        format: 'JSON'
        out: 'dependency-check-report.json'
      continue-on-error: true

  # Smart Contract Testing
  test-contracts:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd contracts && npm ci
        
    - name: Compile contracts
      run: |
        cd contracts
        npm run compile
        
    - name: Run contract tests
      run: |
        cd contracts
        npm run test -- --reporter json --reporter-options output=test-results.json
        
    - name: Run gas optimization tests
      run: |
        cd contracts
        npm run gas-report
        
    - name: Run contract coverage
      run: |
        cd contracts
        npm run test:coverage
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: contract-test-results-${{ matrix.node-version }}
        path: contracts/test-results.json
      continue-on-error: true

  # Backend Testing
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd server && npm ci
        
    - name: Run server tests
      run: |
        cd server
        npm run test -- --coverage --testResultsProcessor=jest-sonar-reporter
        
    - name: Run server e2e tests
      run: |
        cd server
        npm run test:e2e || echo "E2E tests not configured"
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage/lcov.info
        flags: backend
        name: backend-coverage
      continue-on-error: true

  # Frontend Testing
  test-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd client && npm ci
        
    - name: Run client tests
      run: |
        cd client
        npm run test -- --coverage --watchAll=false
        
    - name: Run client e2e tests
      run: |
        cd client
        npm run test:e2e || echo "E2E tests not configured"
        
    - name: Run Lighthouse CI
      run: |
        cd client
        npm install -g @lhci/cli@0.12.x
        lhci autorun || echo "Lighthouse CI not configured"
      continue-on-error: true
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./client/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
      continue-on-error: true

  # Build and Package
  build:
    runs-on: ubuntu-latest
    needs: [code-quality, security-analysis, test-contracts, test-backend, test-frontend]
    if: github.event.inputs.skip_tests != 'true'
    outputs:
      build-version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Generate version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "version=v$(date +'%Y.%m.%d')-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        fi
        
    - name: Install dependencies
      run: |
        cd contracts && npm ci
        cd ../server && npm ci
        cd ../client && npm ci
        
    - name: Build contracts
      run: |
        cd contracts
        npm run compile
        
    - name: Build server
      run: |
        cd server
        npm run build
        
    - name: Build client
      run: |
        cd client
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ steps.version.outputs.version }}
        path: |
          contracts/artifacts/
          server/dist/
          client/.next/
        retention-days: 30

  # Docker Build and Push
  docker-build:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        component: [client, server, contracts]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts-${{ needs.build.outputs.build-version }}
        path: ./
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.build.outputs.build-version }}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.component }}
        file: ./docker/Dockerfile.${{ matrix.component }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to staging
      run: |
        chmod +x scripts/deploy.sh
        ./scripts/deploy.sh develop staging
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add actual smoke tests here
        
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        # Add integration tests here

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to production
      run: |
        chmod +x scripts/deploy.sh
        ./scripts/deploy.sh main production
        
    - name: Run health checks
      run: |
        echo "Running health checks..."
        # Add health checks here
        
    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        # Add performance tests here
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
      continue-on-error: true

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install k6
      run: |
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Run load tests
      run: |
        k6 run tests/performance/load-test.js || echo "Load tests completed"
        
    - name: Run stress tests
      run: |
        k6 run tests/performance/stress-test.js || echo "Stress tests completed"

  # Security Monitoring
  security-monitoring:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        cd contracts && npm audit --audit-level moderate || echo "Contract audit completed"
        cd ../server && npm audit --audit-level moderate || echo "Server audit completed"
        cd ../client && npm audit --audit-level moderate || echo "Client audit completed"
        
    - name: Check for security updates
      run: |
        npm outdated || echo "Dependency check completed"

  # Notify completion
  notify:
    runs-on: ubuntu-latest
    needs: [code-quality, security-analysis, test-contracts, test-backend, test-frontend, build, docker-build, deploy-staging, deploy-production, performance-test]
    if: always()
    steps:
    - name: Create deployment summary
      run: |
        echo "## 🚀 D-CloudX Advanced CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Analysis | ${{ needs.security-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Contract Tests | ${{ needs.test-contracts.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.test-backend.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.test-frontend.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Staging Deploy | ${{ needs.deploy-staging.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Production Deploy | ${{ needs.deploy-production.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Test | ${{ needs.performance-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Pipeline Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Version**: ${{ needs.build.outputs.build-version }}" >> $GITHUB_STEP_SUMMARY
