input {
  beats {
    port => 5044
  }
  
  tcp {
    port => 5000
    codec => json_lines
  }
  
  udp {
    port => 5000
    codec => json_lines
  }
}

filter {
  if [fields][service] == "dcloudx-server" {
    mutate {
      add_field => { "service_type" => "backend" }
    }
    
    if [level] == "ERROR" {
      mutate {
        add_tag => [ "error", "critical" ]
      }
    }
    
    if [message] =~ /blockchain/ {
      mutate {
        add_tag => [ "blockchain" ]
      }
    }
    
    if [message] =~ /cloud/ {
      mutate {
        add_tag => [ "cloud_provider" ]
      }
    }
  }
  
  if [fields][service] == "dcloudx-client" {
    mutate {
      add_field => { "service_type" => "frontend" }
    }
  }
  
  # Parse JSON logs
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
    }
  }
  
  # Parse timestamp
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }
  
  # Add geoip for IP addresses
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }
  
  # Parse user agent
  if [user_agent] {
    useragent {
      source => "user_agent"
      target => "user_agent_parsed"
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "dcloudx-logs-%{+YYYY.MM.dd}"
    template_name => "dcloudx-logs"
    template_pattern => "dcloudx-logs-*"
    template => {
      "index_patterns" => ["dcloudx-logs-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
        "index.refresh_interval" => "5s"
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "level" => { "type" => "keyword" }
          "message" => { "type" => "text" }
          "service" => { "type" => "keyword" }
          "service_type" => { "type" => "keyword" }
          "tags" => { "type" => "keyword" }
          "client_ip" => { "type" => "ip" }
          "geoip" => {
            "properties" => {
              "country_name" => { "type" => "keyword" }
              "city_name" => { "type" => "keyword" }
              "location" => { "type" => "geo_point" }
            }
          }
          "user_agent_parsed" => {
            "properties" => {
              "name" => { "type" => "keyword" }
              "version" => { "type" => "keyword" }
              "os" => { "type" => "keyword" }
              "device" => { "type" => "keyword" }
            }
          }
        }
      }
    }
  }
  
  # Also output to stdout for debugging
  stdout {
    codec => rubydebug
  }
}
